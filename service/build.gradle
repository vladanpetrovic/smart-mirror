buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
        springCloudVersion = 'Edgware.RELEASE'
        springBootAdminVersion = '1.5.6'
    }
    repositories {
        mavenCentral()
        maven { url gradlePluginsRepo }
        maven { url springReleaseRepo }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'gradle.plugin.org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.3.2'
    }
}

def apiProjects = [
        project(':service:api-gateway'),
        project(':service:api:quote'),
        project(':service:api:weather'),
        project(':service:api:device'),
        project(':service:api:photo'),
        project(':service:api:reminder'),
        project(':service:api:todo'),
        project(':service:api:user'),

]
def springBootStarterProjects = [
        project(':service:api-shared:autoconfigure'),
        project(':service:api-shared:starter')
]
def springCloudProjects = apiProjects + springBootStarterProjects + [
        project(':service:cloud:auth'),
        project(':service:cloud:circuit-breaker-dashboard'),
        project(':service:cloud:config'),
        project(':service:cloud:discovery'),
        project(':service:cloud:tracing'),
        project(':service:api-gateway'),
        project(':service:admin')
]
def springBootProjects = springCloudProjects - springBootStarterProjects
def springProjects = springBootProjects
def javaProjects = springProjects

configure(javaProjects) {
    apply plugin: 'java'
    apply from: "${gradleDir}/testing.gradle"
    apply from: "${gradleDir}/codeCoverage.gradle"
//    apply from: "${gradleDir}/staticCodeAnalysis.gradle"

    targetCompatibility = javaLangVersion
    sourceCompatibility = javaLangVersion
}

configure(springCloudProjects) {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    repositories {
        mavenCentral()
        maven { url springReleaseRepo }
    }

}

configure(springBootProjects) {
    apply plugin: 'org.springframework.boot'

    group = 'com.neatlicity.service'

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-actuator'

//        runtime 'org.springframework.boot:spring-boot-devtools'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }
}

configure(apiProjects) {

    dependencies {
        compile project(':service:api-shared:starter')
        compile 'org.springframework.cloud:spring-cloud-starter-config'
        compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
        compile 'org.springframework.cloud:spring-cloud-starter-zipkin'
        compile "de.codecentric:spring-boot-admin-starter-client:${springBootAdminVersion}"
    }
}

configure(springProjects) {
    group = 'com.neatlicity.service'

    dependencies {
        compile 'org.projectlombok:lombok'
        compile 'org.slf4j:slf4j-api'
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
        testCompile 'org.objenesis:objenesis'
    }
}

configure(springBootStarterProjects) {
    apply plugin: 'java'

    targetCompatibility = javaLangVersion
    sourceCompatibility = javaLangVersion

    group = 'com.neatlicity.service'
}